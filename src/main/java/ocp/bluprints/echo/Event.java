/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ocp.bluprints.echo;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"ocp.bluprints.echo\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"GUID (UUID) of the event in order to make it globally identificable.\"},{\"name\":\"traceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Identifier which is set to a number of events that belong to the same context (tree of execution)\"},{\"name\":\"created\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Time when the event was originally created in the source in ISO 8601 in UTC\"},{\"name\":\"ldd\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Logical Data Domain for the event\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The source system hostname of the message producer\"},{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The version of the event definition\"},{\"name\":\"confidentiality\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Confidentiality level (1..4) of the information contained in the event\"},{\"name\":\"filter\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The category of the event to allow a quick filtering in the transport layer\"},{\"name\":\"personId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The category of the event to allow a quick filtering in the transport layer\"}]}");
    private static final long serialVersionUID = -3672726866241406664L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Event> ENCODER =
            new BinaryMessageEncoder<Event>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Event> DECODER =
            new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Event>
            WRITER$ = (org.apache.avro.io.DatumWriter<Event>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Event>
            READER$ = (org.apache.avro.io.DatumReader<Event>) MODEL$.createDatumReader(SCHEMA$);
    /** GUID (UUID) of the event in order to make it globally identificable. */
    @Deprecated
    public java.lang.CharSequence id;
    /** Identifier which is set to a number of events that belong to the same context (tree of execution) */
    @Deprecated
    public java.lang.CharSequence traceId;
    /** Time when the event was originally created in the source in ISO 8601 in UTC */
    @Deprecated
    public java.lang.CharSequence created;
    /** Logical Data Domain for the event */
    @Deprecated
    public java.lang.CharSequence ldd;
    /** The source system hostname of the message producer */
    @Deprecated
    public java.lang.CharSequence source;
    /** The version of the event definition */
    @Deprecated
    public java.lang.CharSequence version;
    /** Confidentiality level (1..4) of the information contained in the event */
    @Deprecated
    public java.lang.CharSequence confidentiality;
    /** The category of the event to allow a quick filtering in the transport layer */
    @Deprecated
    public java.lang.CharSequence filter;
    /** The category of the event to allow a quick filtering in the transport layer */
    @Deprecated
    public java.lang.CharSequence personId;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Event() {
    }
    /**
     * All-args constructor.
     * @param id GUID (UUID) of the event in order to make it globally identificable.
     * @param traceId Identifier which is set to a number of events that belong to the same context (tree of execution)
     * @param created Time when the event was originally created in the source in ISO 8601 in UTC
     * @param ldd Logical Data Domain for the event
     * @param source The source system hostname of the message producer
     * @param version The version of the event definition
     * @param confidentiality Confidentiality level (1..4) of the information contained in the event
     * @param filter The category of the event to allow a quick filtering in the transport layer
     * @param personId The category of the event to allow a quick filtering in the transport layer
     */
    public Event(java.lang.CharSequence id, java.lang.CharSequence traceId, java.lang.CharSequence created, java.lang.CharSequence ldd, java.lang.CharSequence source, java.lang.CharSequence version, java.lang.CharSequence confidentiality, java.lang.CharSequence filter, java.lang.CharSequence personId) {
        this.id = id;
        this.traceId = traceId;
        this.created = created;
        this.ldd = ldd;
        this.source = source;
        this.version = version;
        this.confidentiality = confidentiality;
        this.filter = filter;
        this.personId = personId;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Event> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Event> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Event> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a Event from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Event instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Event fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Event RecordBuilder.
     * @return A new Event RecordBuilder
     */
    public static ocp.bluprints.echo.Event.Builder newBuilder() {
        return new ocp.bluprints.echo.Event.Builder();
    }

    /**
     * Creates a new Event RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Event RecordBuilder
     */
    public static ocp.bluprints.echo.Event.Builder newBuilder(ocp.bluprints.echo.Event.Builder other) {
        if (other == null) {
            return new ocp.bluprints.echo.Event.Builder();
        } else {
            return new ocp.bluprints.echo.Event.Builder(other);
        }
    }

    /**
     * Creates a new Event RecordBuilder by copying an existing Event instance.
     * @param other The existing instance to copy.
     * @return A new Event RecordBuilder
     */
    public static ocp.bluprints.echo.Event.Builder newBuilder(ocp.bluprints.echo.Event other) {
        if (other == null) {
            return new ocp.bluprints.echo.Event.Builder();
        } else {
            return new ocp.bluprints.echo.Event.Builder(other);
        }
    }

    /**
     * Serializes this Event to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return traceId;
            case 2:
                return created;
            case 3:
                return ldd;
            case 4:
                return source;
            case 5:
                return version;
            case 6:
                return confidentiality;
            case 7:
                return filter;
            case 8:
                return personId;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.CharSequence) value$;
                break;
            case 1:
                traceId = (java.lang.CharSequence) value$;
                break;
            case 2:
                created = (java.lang.CharSequence) value$;
                break;
            case 3:
                ldd = (java.lang.CharSequence) value$;
                break;
            case 4:
                source = (java.lang.CharSequence) value$;
                break;
            case 5:
                version = (java.lang.CharSequence) value$;
                break;
            case 6:
                confidentiality = (java.lang.CharSequence) value$;
                break;
            case 7:
                filter = (java.lang.CharSequence) value$;
                break;
            case 8:
                personId = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return GUID (UUID) of the event in order to make it globally identificable.
     */
    public java.lang.CharSequence getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * GUID (UUID) of the event in order to make it globally identificable.
     * @param value the value to set.
     */
    public void setId(java.lang.CharSequence value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'traceId' field.
     * @return Identifier which is set to a number of events that belong to the same context (tree of execution)
     */
    public java.lang.CharSequence getTraceId() {
        return traceId;
    }

    /**
     * Sets the value of the 'traceId' field.
     * Identifier which is set to a number of events that belong to the same context (tree of execution)
     * @param value the value to set.
     */
    public void setTraceId(java.lang.CharSequence value) {
        this.traceId = value;
    }

    /**
     * Gets the value of the 'created' field.
     * @return Time when the event was originally created in the source in ISO 8601 in UTC
     */
    public java.lang.CharSequence getCreated() {
        return created;
    }

    /**
     * Sets the value of the 'created' field.
     * Time when the event was originally created in the source in ISO 8601 in UTC
     * @param value the value to set.
     */
    public void setCreated(java.lang.CharSequence value) {
        this.created = value;
    }

    /**
     * Gets the value of the 'ldd' field.
     * @return Logical Data Domain for the event
     */
    public java.lang.CharSequence getLdd() {
        return ldd;
    }

    /**
     * Sets the value of the 'ldd' field.
     * Logical Data Domain for the event
     * @param value the value to set.
     */
    public void setLdd(java.lang.CharSequence value) {
        this.ldd = value;
    }

    /**
     * Gets the value of the 'source' field.
     * @return The source system hostname of the message producer
     */
    public java.lang.CharSequence getSource() {
        return source;
    }

    /**
     * Sets the value of the 'source' field.
     * The source system hostname of the message producer
     * @param value the value to set.
     */
    public void setSource(java.lang.CharSequence value) {
        this.source = value;
    }

    /**
     * Gets the value of the 'version' field.
     * @return The version of the event definition
     */
    public java.lang.CharSequence getVersion() {
        return version;
    }

    /**
     * Sets the value of the 'version' field.
     * The version of the event definition
     * @param value the value to set.
     */
    public void setVersion(java.lang.CharSequence value) {
        this.version = value;
    }

    /**
     * Gets the value of the 'confidentiality' field.
     * @return Confidentiality level (1..4) of the information contained in the event
     */
    public java.lang.CharSequence getConfidentiality() {
        return confidentiality;
    }

    /**
     * Sets the value of the 'confidentiality' field.
     * Confidentiality level (1..4) of the information contained in the event
     * @param value the value to set.
     */
    public void setConfidentiality(java.lang.CharSequence value) {
        this.confidentiality = value;
    }

    /**
     * Gets the value of the 'filter' field.
     * @return The category of the event to allow a quick filtering in the transport layer
     */
    public java.lang.CharSequence getFilter() {
        return filter;
    }

    /**
     * Sets the value of the 'filter' field.
     * The category of the event to allow a quick filtering in the transport layer
     * @param value the value to set.
     */
    public void setFilter(java.lang.CharSequence value) {
        this.filter = value;
    }

    /**
     * Gets the value of the 'personId' field.
     * @return The category of the event to allow a quick filtering in the transport layer
     */
    public java.lang.CharSequence getPersonId() {
        return personId;
    }

    /**
     * Sets the value of the 'personId' field.
     * The category of the event to allow a quick filtering in the transport layer
     * @param value the value to set.
     */
    public void setPersonId(java.lang.CharSequence value) {
        this.personId = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.id);

        out.writeString(this.traceId);

        out.writeString(this.created);

        out.writeString(this.ldd);

        out.writeString(this.source);

        out.writeString(this.version);

        out.writeString(this.confidentiality);

        if (this.filter == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.filter);
        }

        if (this.personId == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.personId);
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8) this.id : null);

            this.traceId = in.readString(this.traceId instanceof Utf8 ? (Utf8) this.traceId : null);

            this.created = in.readString(this.created instanceof Utf8 ? (Utf8) this.created : null);

            this.ldd = in.readString(this.ldd instanceof Utf8 ? (Utf8) this.ldd : null);

            this.source = in.readString(this.source instanceof Utf8 ? (Utf8) this.source : null);

            this.version = in.readString(this.version instanceof Utf8 ? (Utf8) this.version : null);

            this.confidentiality = in.readString(this.confidentiality instanceof Utf8 ? (Utf8) this.confidentiality : null);

            if (in.readIndex() != 1) {
                in.readNull();
                this.filter = null;
            } else {
                this.filter = in.readString(this.filter instanceof Utf8 ? (Utf8) this.filter : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.personId = null;
            } else {
                this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8) this.personId : null);
            }

        } else {
            for (int i = 0; i < 9; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.id = in.readString(this.id instanceof Utf8 ? (Utf8) this.id : null);
                        break;

                    case 1:
                        this.traceId = in.readString(this.traceId instanceof Utf8 ? (Utf8) this.traceId : null);
                        break;

                    case 2:
                        this.created = in.readString(this.created instanceof Utf8 ? (Utf8) this.created : null);
                        break;

                    case 3:
                        this.ldd = in.readString(this.ldd instanceof Utf8 ? (Utf8) this.ldd : null);
                        break;

                    case 4:
                        this.source = in.readString(this.source instanceof Utf8 ? (Utf8) this.source : null);
                        break;

                    case 5:
                        this.version = in.readString(this.version instanceof Utf8 ? (Utf8) this.version : null);
                        break;

                    case 6:
                        this.confidentiality = in.readString(this.confidentiality instanceof Utf8 ? (Utf8) this.confidentiality : null);
                        break;

                    case 7:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.filter = null;
                        } else {
                            this.filter = in.readString(this.filter instanceof Utf8 ? (Utf8) this.filter : null);
                        }
                        break;

                    case 8:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.personId = null;
                        } else {
                            this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8) this.personId : null);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for Event instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
            implements org.apache.avro.data.RecordBuilder<Event> {

        /** GUID (UUID) of the event in order to make it globally identificable. */
        private java.lang.CharSequence id;
        /** Identifier which is set to a number of events that belong to the same context (tree of execution) */
        private java.lang.CharSequence traceId;
        /** Time when the event was originally created in the source in ISO 8601 in UTC */
        private java.lang.CharSequence created;
        /** Logical Data Domain for the event */
        private java.lang.CharSequence ldd;
        /** The source system hostname of the message producer */
        private java.lang.CharSequence source;
        /** The version of the event definition */
        private java.lang.CharSequence version;
        /** Confidentiality level (1..4) of the information contained in the event */
        private java.lang.CharSequence confidentiality;
        /** The category of the event to allow a quick filtering in the transport layer */
        private java.lang.CharSequence filter;
        /** The category of the event to allow a quick filtering in the transport layer */
        private java.lang.CharSequence personId;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(ocp.bluprints.echo.Event.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.traceId)) {
                this.traceId = data().deepCopy(fields()[1].schema(), other.traceId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.created)) {
                this.created = data().deepCopy(fields()[2].schema(), other.created);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.ldd)) {
                this.ldd = data().deepCopy(fields()[3].schema(), other.ldd);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.source)) {
                this.source = data().deepCopy(fields()[4].schema(), other.source);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.version)) {
                this.version = data().deepCopy(fields()[5].schema(), other.version);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.confidentiality)) {
                this.confidentiality = data().deepCopy(fields()[6].schema(), other.confidentiality);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.filter)) {
                this.filter = data().deepCopy(fields()[7].schema(), other.filter);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.personId)) {
                this.personId = data().deepCopy(fields()[8].schema(), other.personId);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
        }

        /**
         * Creates a Builder by copying an existing Event instance
         * @param other The existing instance to copy.
         */
        private Builder(ocp.bluprints.echo.Event other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.traceId)) {
                this.traceId = data().deepCopy(fields()[1].schema(), other.traceId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.created)) {
                this.created = data().deepCopy(fields()[2].schema(), other.created);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.ldd)) {
                this.ldd = data().deepCopy(fields()[3].schema(), other.ldd);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.source)) {
                this.source = data().deepCopy(fields()[4].schema(), other.source);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.version)) {
                this.version = data().deepCopy(fields()[5].schema(), other.version);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.confidentiality)) {
                this.confidentiality = data().deepCopy(fields()[6].schema(), other.confidentiality);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.filter)) {
                this.filter = data().deepCopy(fields()[7].schema(), other.filter);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.personId)) {
                this.personId = data().deepCopy(fields()[8].schema(), other.personId);
                fieldSetFlags()[8] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * GUID (UUID) of the event in order to make it globally identificable.
         * @return The value.
         */
        public java.lang.CharSequence getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         * GUID (UUID) of the event in order to make it globally identificable.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * GUID (UUID) of the event in order to make it globally identificable.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * GUID (UUID) of the event in order to make it globally identificable.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'traceId' field.
         * Identifier which is set to a number of events that belong to the same context (tree of execution)
         * @return The value.
         */
        public java.lang.CharSequence getTraceId() {
            return traceId;
        }


        /**
         * Sets the value of the 'traceId' field.
         * Identifier which is set to a number of events that belong to the same context (tree of execution)
         * @param value The value of 'traceId'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setTraceId(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.traceId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'traceId' field has been set.
         * Identifier which is set to a number of events that belong to the same context (tree of execution)
         * @return True if the 'traceId' field has been set, false otherwise.
         */
        public boolean hasTraceId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'traceId' field.
         * Identifier which is set to a number of events that belong to the same context (tree of execution)
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearTraceId() {
            traceId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'created' field.
         * Time when the event was originally created in the source in ISO 8601 in UTC
         * @return The value.
         */
        public java.lang.CharSequence getCreated() {
            return created;
        }


        /**
         * Sets the value of the 'created' field.
         * Time when the event was originally created in the source in ISO 8601 in UTC
         * @param value The value of 'created'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setCreated(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.created = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'created' field has been set.
         * Time when the event was originally created in the source in ISO 8601 in UTC
         * @return True if the 'created' field has been set, false otherwise.
         */
        public boolean hasCreated() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'created' field.
         * Time when the event was originally created in the source in ISO 8601 in UTC
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearCreated() {
            created = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'ldd' field.
         * Logical Data Domain for the event
         * @return The value.
         */
        public java.lang.CharSequence getLdd() {
            return ldd;
        }


        /**
         * Sets the value of the 'ldd' field.
         * Logical Data Domain for the event
         * @param value The value of 'ldd'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setLdd(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.ldd = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'ldd' field has been set.
         * Logical Data Domain for the event
         * @return True if the 'ldd' field has been set, false otherwise.
         */
        public boolean hasLdd() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'ldd' field.
         * Logical Data Domain for the event
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearLdd() {
            ldd = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'source' field.
         * The source system hostname of the message producer
         * @return The value.
         */
        public java.lang.CharSequence getSource() {
            return source;
        }


        /**
         * Sets the value of the 'source' field.
         * The source system hostname of the message producer
         * @param value The value of 'source'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setSource(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.source = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'source' field has been set.
         * The source system hostname of the message producer
         * @return True if the 'source' field has been set, false otherwise.
         */
        public boolean hasSource() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'source' field.
         * The source system hostname of the message producer
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearSource() {
            source = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'version' field.
         * The version of the event definition
         * @return The value.
         */
        public java.lang.CharSequence getVersion() {
            return version;
        }


        /**
         * Sets the value of the 'version' field.
         * The version of the event definition
         * @param value The value of 'version'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setVersion(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.version = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'version' field has been set.
         * The version of the event definition
         * @return True if the 'version' field has been set, false otherwise.
         */
        public boolean hasVersion() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'version' field.
         * The version of the event definition
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearVersion() {
            version = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'confidentiality' field.
         * Confidentiality level (1..4) of the information contained in the event
         * @return The value.
         */
        public java.lang.CharSequence getConfidentiality() {
            return confidentiality;
        }


        /**
         * Sets the value of the 'confidentiality' field.
         * Confidentiality level (1..4) of the information contained in the event
         * @param value The value of 'confidentiality'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setConfidentiality(java.lang.CharSequence value) {
            validate(fields()[6], value);
            this.confidentiality = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'confidentiality' field has been set.
         * Confidentiality level (1..4) of the information contained in the event
         * @return True if the 'confidentiality' field has been set, false otherwise.
         */
        public boolean hasConfidentiality() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'confidentiality' field.
         * Confidentiality level (1..4) of the information contained in the event
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearConfidentiality() {
            confidentiality = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'filter' field.
         * The category of the event to allow a quick filtering in the transport layer
         * @return The value.
         */
        public java.lang.CharSequence getFilter() {
            return filter;
        }


        /**
         * Sets the value of the 'filter' field.
         * The category of the event to allow a quick filtering in the transport layer
         * @param value The value of 'filter'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setFilter(java.lang.CharSequence value) {
            validate(fields()[7], value);
            this.filter = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'filter' field has been set.
         * The category of the event to allow a quick filtering in the transport layer
         * @return True if the 'filter' field has been set, false otherwise.
         */
        public boolean hasFilter() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'filter' field.
         * The category of the event to allow a quick filtering in the transport layer
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearFilter() {
            filter = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'personId' field.
         * The category of the event to allow a quick filtering in the transport layer
         * @return The value.
         */
        public java.lang.CharSequence getPersonId() {
            return personId;
        }


        /**
         * Sets the value of the 'personId' field.
         * The category of the event to allow a quick filtering in the transport layer
         * @param value The value of 'personId'.
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder setPersonId(java.lang.CharSequence value) {
            validate(fields()[8], value);
            this.personId = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'personId' field has been set.
         * The category of the event to allow a quick filtering in the transport layer
         * @return True if the 'personId' field has been set, false otherwise.
         */
        public boolean hasPersonId() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'personId' field.
         * The category of the event to allow a quick filtering in the transport layer
         * @return This builder.
         */
        public ocp.bluprints.echo.Event.Builder clearPersonId() {
            personId = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Event build() {
            try {
                Event record = new Event();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.traceId = fieldSetFlags()[1] ? this.traceId : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.created = fieldSetFlags()[2] ? this.created : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.ldd = fieldSetFlags()[3] ? this.ldd : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.source = fieldSetFlags()[4] ? this.source : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.version = fieldSetFlags()[5] ? this.version : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.confidentiality = fieldSetFlags()[6] ? this.confidentiality : (java.lang.CharSequence) defaultValue(fields()[6]);
                record.filter = fieldSetFlags()[7] ? this.filter : (java.lang.CharSequence) defaultValue(fields()[7]);
                record.personId = fieldSetFlags()[8] ? this.personId : (java.lang.CharSequence) defaultValue(fields()[8]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










